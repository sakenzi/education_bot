from aiogram import Router, types, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart
from states.register import RegisterForm
from keyboards.register import directions_kb, phone_kb
from crud.student_crud import create_student
from aiogram.fsm.context import FSMContext
from keyboards.subscribe import start_kb
from aiogram.exceptions import TelegramNetworkError
import logging


router = Router()

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await message.answer("–°”ô–ª–µ–º —Ç“Ø–ª–µ–∫, –±—ñ–∑–¥—ñ“£ –±–æ—Ç“õ–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£, —Å–µ–Ω—ñ –∫”©—Ä–≥–µ–Ω—ñ–º—ñ–∑–≥–µ “õ—É–∞–Ω—ã—à—Ç—ã–º—ã–∑!")
    
    video_path = "media/IMG_4331.MP4"
    
    try:
        welcome_video = FSInputFile(video_path)
        await message.answer_video(
            video=welcome_video,
            caption="“ö–æ—à –∫–µ–ª–¥—ñ“£ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç!",
            timeout=15 
        )
        logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except TelegramNetworkError as e:
        await message.answer("‚ùå –ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –±–µ–π–Ω–µ–Ω—ñ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –¢–∞“ì—ã –∂–∞—Å–∞—É–¥—ã —Å”ô–ª –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∫”©—Ä—ñ“£—ñ–∑–¥—ñ ”©—Ç—ñ–Ω–µ–º—ñ–∑.")
    except FileNotFoundError:
        await message.answer("‚ùå “ö–∞—Ç–µ: –±–µ–π–Ω–µ —Å–µ—Ä–≤–µ—Ä–¥–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
    except Exception as e:
        await message.answer("‚ùå “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. C”ô–ª –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∫”©—Ä—É—Ä—ñ“£—ñ–∑–¥—ñ ”©—Ç—ñ–Ω–µ–º—ñ–∑.")
    
    await message.answer("–¢–∞–Ω—ã—Å—ã–ø –∞–ª–∞–π—ã“õ! –ê—Ç—ã-–∂”©–Ω—ñ“£–¥—ñ –∂–∞–∑ üëá")
    await state.set_state(RegisterForm.name)


@router.message(RegisterForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£–¥—ñ –∂—ñ–±–µ—Ä üëá:", reply_markup=phone_kb)
    await state.set_state(RegisterForm.phone)


@router.message(RegisterForm.phone, F.contact)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    kb = await directions_kb()
    await message.answer("”®–∑ –ø”ô–Ω–¥—ñ–∫ –±–∞“ì—ã—Ç—ã“£–¥—ã —Ç–∞“£–¥–∞ üëá", reply_markup=kb)
    await state.set_state(RegisterForm.direction)


@router.message(RegisterForm.direction)
async def get_direction(message: types.Message, state: FSMContext):
    data = await state.get_data()
    student = await create_student(
        telegram_id=str(message.from_user.id),
        username=message.from_user.username,
        full_name=data["full_name"],
        phone=data["phone"],
        direction_name=message.text
    )

    if not student:
        await message.answer("–ë“±–Ω–¥–∞–π –±–∞“ì—ã—Ç –∂–æ“õ, –±–µ—Ä—ñ–ª–≥–µ–Ω–¥–µ—Ä–¥–µ–Ω —Ç–∞“£–¥–∞")
        return
    
    await message.answer(
        f"–ñ–∞—Ä–∞–π—Å—ã“£ {data['full_name']}! üéâ –°–µ–Ω {message.text} –±–∞“ì—ã—Ç—ã–Ω–∞ —Ç—ñ—Ä–∫–µ–ª–¥—ñ“£!",
        reply_markup=types.ReplyKeyboardRemove()
    )

    await message.answer(
        "–ï–Ω–¥—ñ —Å–µ–Ω –¥–µ“£–≥–µ–π—ñ“£–¥—ñ –∞–Ω—ã“õ—Ç–∞—É “Ø—à—ñ–Ω —Ç–µ—Å—Ç—Ç–µ–Ω ”©—Ç—É—ñ“£ –∫–µ—Ä–µ–∫, –±—ñ—Ä–∞“õ –±—ñ—Ä—ñ–Ω—à—ñ –º—ã–Ω–∞ –∫–∞–Ω–∞–ª–¥–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª—ñ–ø –∞–ª üëá",
        reply_markup=start_kb()
    )
    await state.clear()