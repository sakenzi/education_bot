import logging
import asyncio
from aiogram import Router, F, types, Bot
from aiogram.types import FSInputFile
from keyboards.course import course_button
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramNetworkError
from crud import test_crud
from handlers.subscribe import CHANNELS
from keyboards.subscribe import subscribe_kb, test_start_kb
from keyboards.video import video_kb
from handlers.discount_reminder import schedule_discount_reminders
from datetime import datetime, timedelta

router = Router()

@router.callback_query(F.data == "real_start_test")
async def start_test(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    not_subscribed = []

    for channel in CHANNELS:
        try:
            chat_member = await bot.get_chat_member(channel, user_id)
            if chat_member.status in ["left", "kicked"]:
                not_subscribed.append(channel)
        except Exception as e:
            not_subscribed.append(channel)

    if not_subscribed:
        try:
            await callback.message.answer(
                "–ö–µ–ª–µ—Å—ñ –∫–∞–Ω–∞–ª–¥–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã–ø –∞–ª üëá:\n" + "\n".join(not_subscribed),
                reply_markup=subscribe_kb()
            )
        except TelegramNetworkError as e:
            await callback.message.answer("‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä!")
        return

    user_id_str = str(user_id)
    student = await test_crud.get_student_by_telegram_id(user_id_str)
    if not student:
        try:
            await callback.message.answer("‚ùå –°–µ–Ω —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ“£!")
        except TelegramNetworkError as e:
            await callback.message.answer("‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä")
        return

    tests = await test_crud.get_tests_by_direction(student.direction_id)
    if not tests or len(tests) < 10:
        try:
            await callback.message.answer("‚ùå –ë“±–ª –±–∞“ì—ã—Ç—Ç–∞ —Ç–µ—Å—Ç –∂–æ“õ –∏–ª–∏ —Ç–µ—Å—Ç—Ç–µ—Ä —Å–∞–Ω—ã –∂–µ—Ç–∫—ñ–ª—ñ–∫—Å—ñ–∑!")
        except TelegramNetworkError as e:
            await callback.message.answer("‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä")
        return

    await state.update_data(
        tests=[t.id for t in tests],
        current=0,
        correct=0,
        first_half_correct=0,
        second_half_correct=0
    )
    await send_question(callback.message, state, bot)

async def send_question(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    test_ids = data.get("tests", [])
    current = data.get("current", 0)

    if current >= len(test_ids):
        await finish_test(message, state, bot)
        return

    test = await test_crud.get_test_by_id(test_ids[current])
    if not test:
        await state.update_data(current=current + 1)
        await send_question(message, state, bot)
        return

    answers = await test_crud.get_answers_by_test(test.id)
    if len(answers) < 2:
        await state.update_data(current=current + 1)
        await send_question(message, state, bot)
        return

    options = [a.text for a in answers]
    correct_option_id = next((i for i, a in enumerate(answers) if a.is_correct), None)
    if correct_option_id is None:
        await state.update_data(current=current + 1)
        await send_question(message, state, bot)
        return

    try:
        await message.answer_poll(
            question=test.question,
            options=options,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=False,
            timeout=30
        )
    except TelegramNetworkError as e:
        await message.answer("‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä")
        await state.update_data(current=current + 1)
        await send_question(message, state, bot)

@router.poll_answer()
async def handle_poll_answer(poll: types.PollAnswer, state: FSMContext, bot: Bot):
    data = await state.get_data()
    current = data.get("current", 0)
    test_ids = data.get("tests", [])
    first_half_correct = data.get("first_half_correct", 0)
    second_half_correct = data.get("second_half_correct", 0)

    test = await test_crud.get_test_by_id(test_ids[current])
    answers = await test_crud.get_answers_by_test(test.id)

    correct_option_id = next((i for i, a in enumerate(answers) if a.is_correct), None)
    chosen = poll.option_ids[0] if poll.option_ids else None

    is_correct = chosen == correct_option_id

    if current < 5:
        first_half_correct += 1 if is_correct else 0
    else:
        second_half_correct += 1 if is_correct else 0

    total_correct = data.get("correct", 0) + (1 if is_correct else 0)

    await state.update_data(
        current=current + 1,
        correct=total_correct,
        first_half_correct=first_half_correct,
        second_half_correct=second_half_correct
    )

    chat_id = poll.user.id
    try:
        await send_question(await bot.send_message(chat_id, "–ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ üëá"), state, bot)
    except TelegramNetworkError as e:
        await bot.send_message(chat_id, "‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä")

async def finish_test(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    correct = data.get("correct", 0)
    total = len(data.get("tests", []))
    first_half_correct = data.get("first_half_correct", 0)
    second_half_correct = data.get("second_half_correct", 0)

    if total != 10:
        try:
            await message.answer("‚ùå –¢–µ—Å—Ç—Ç–µ—Ä ”ô–ª—ñ –¥–∞–π—ã–Ω –µ–º–µ—Å, –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä! üòâ")
        except TelegramNetworkError as e:
            logging.error(f"–•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∂–µ–ª—ñ–ª—ñ–∫ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await state.clear()
        return

    if first_half_correct <= 2:
        first_rating_name = "A"
    elif first_half_correct == 3:
        first_rating_name = "B"
    else:
        first_rating_name = "C"

    if second_half_correct <= 2:
        second_rating_name = "A"
    elif second_half_correct == 3:
        second_rating_name = "B"
    else:
        second_rating_name = "C"

    student = await test_crud.get_student_by_telegram_id(str(message.chat.id))
    if not student:
        try:
            await message.answer("‚ùå –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É, –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã")
        except TelegramNetworkError as e:
            logging.error(f"–•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∂–µ–ª—ñ–ª—ñ–∫ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await state.clear()
        return

    first_rating = await test_crud.get_rating(first_rating_name)
    second_rating = await test_crud.get_rating(second_rating_name)

    if first_rating and second_rating:
        first_videos = await test_crud.get_videos_by_rating_and_direction(first_rating.id, student.direction_id)
        second_videos = await test_crud.get_videos_by_rating_and_direction(second_rating.id, student.direction_id)

        first_video = first_videos[0] if first_videos else None
        second_video = first_videos[1] if len(first_videos) > 1 else second_videos[0] if second_videos else None
    else:
        first_video = None
        second_video = None

    if first_rating:
        await test_crud.save_student_result(student.id, first_rating.id)

    try:
        await message.answer(
            f"‚úÖ –¢–µ—Å—Ç –∞—è“õ—Ç–∞–ª–¥—ã! –°–µ–Ω {correct}/{total} –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–¥—ñ“£ üéâ\n\n"
            f"–ë—ñ—Ä—ñ–Ω—à—ñ —Ç–∞“£–¥–∞—É –ø”ô–Ω –±–æ–π—ã–Ω—à–∞: {first_half_correct}/5 ({first_rating_name} –¥–µ“£–≥–µ–π)\n"
            f"–ï–∫—ñ–Ω—à—ñ —Ç–∞“£–¥–∞—É –ø”ô–Ω –±–æ–π—ã–Ω—à–∞: {second_half_correct}/5 ({second_rating_name} –¥–µ“£–≥–µ–π)",
        )
    except TelegramNetworkError as e:
        await message.answer(
            "‚ùå –ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –Ω”ô—Ç–∏–∂–µ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. ”ò—Ä–µ–∫–µ—Ç—Ç—ñ –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞",
            reply_markup=test_start_kb()
        )
    except Exception as e:
        logging.error(f"–ù”ô—Ç–∏–∂–µ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await message.answer(
            "‚ùå –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É —Ç—É—ã–Ω–¥–∞–¥—ã. ”ò—Ä–µ–∫–µ—Ç—Ç—ñ –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞",
            reply_markup=test_start_kb()
        )

    if first_video:
        try:
            await message.answer(
                f"üé• –ë—ñ—Ä—ñ–Ω—à—ñ —Ç–∞“£–¥–∞—É –ø”ô–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Å–∞–±–∞“õ: {first_video.title}\n–°—ñ–ª—Ç–µ–º–µ: {first_video.url}"
            )
        except TelegramNetworkError as e:
            logging.error(f"–ë—ñ—Ä—ñ–Ω—à—ñ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∂–µ–ª—ñ–ª—ñ–∫ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            await message.answer("‚ùå –ë—ñ—Ä—ñ–Ω—à—ñ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑")
        except Exception as e:
            logging.error(f"–ë—ñ—Ä—ñ–Ω—à—ñ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            await message.answer("‚ùå –ë—ñ—Ä—ñ–Ω—à—ñ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É —Ç—É—ã–Ω–¥–∞–¥—ã")

    if second_video:
        try:
            await message.answer(
                f"üé• –ï–∫—ñ–Ω—à—ñ —Ç–∞“£–¥–∞—É –ø”ô–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Å–∞–±–∞“õ: {second_video.title}\n–°—ñ–ª—Ç–µ–º–µ: {second_video.url}"
            )
        except TelegramNetworkError as e:
            logging.error(f"–ï–∫—ñ–Ω—à—ñ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∂–µ–ª—ñ–ª—ñ–∫ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            await message.answer("‚ùå –ï–∫—ñ–Ω—à—ñ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑")
        except Exception as e:
            logging.error(f"–ï–∫—ñ–Ω—à—ñ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            await message.answer("‚ùå –ï–∫—ñ–Ω—à—ñ –≤–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É —Ç—É—ã–Ω–¥–∞–¥—ã")

    try:
        photo = FSInputFile("media/hqdefault.jpg")  
        await message.answer_photo(photo, caption="üì∏ –ê—Ä–Ω–∞–π—ã –∫—É—Ä—Å —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç!")
    except TelegramNetworkError as e:
        logging.error(f"–°—É—Ä–µ—Ç—Ç—ñ –∂—ñ–±–µ—Ä—É –∞“õ–∞—É—ã: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    except Exception as e:
        logging.error(f"–°—É—Ä–µ—Ç—Ç—ñ –∂—ñ–±–µ—Ä—É –∞“õ–∞—É—ã: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    discount_end_time = datetime.now() + timedelta(hours=1)
    discount_end_message = discount_end_time.strftime("%H:%M")
    course_text = f"üìö –î–µ“£–≥–µ–π—ñ“£–¥—ñ –∫”©—Ç–µ—Ä—É “Ø—à—ñ–Ω –∞—Ä–Ω–∞–π—ã –∫—É—Ä—Å –±–∞—Ä! 1 —Å–∞“ì–∞—Ç —ñ—à—ñ–Ω–¥–µ –∂–∞–∑—ã–ª—ã–ø “Ø–ª–≥–µ—Ä—ñ“£—ñ–∑, –∂–µ“£—ñ–ª–¥—ñ–∫–ø–µ–Ω! –ñ–µ“£—ñ–ª–¥—ñ–∫—Ç—ñ“£ –∞—è“õ—Ç–∞–ª—É —É–∞“õ—ã—Ç—ã {discount_end_message}."

    try:
        await message.answer(course_text)
        await asyncio.sleep(0.5)
        await message.answer("–ö—É—Ä—Å“õ–∞ —Ç—ñ—Ä–∫–µ–ª—É üëá", reply_markup=course_button)
    except TelegramNetworkError as e:
        logging.error(f"–ö—É—Ä—Å —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∂–µ–ª—ñ–ª—ñ–∫ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await message.answer("‚ùå –ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∫—É—Ä—Å —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑")
    except Exception as e:
        logging.error(f"–ö—É—Ä—Å —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ–≥—ñ –∞“õ–∞—É: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await message.answer("‚ùå –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É —Ç—É—ã–Ω–¥–∞–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑")

    await schedule_discount_reminders(bot, message.chat.id)
    await state.clear()