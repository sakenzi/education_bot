import logging
from aiogram import Router, F, types, Bot
from aiogram.types import InlineKeyboardMarkup
from keyboards.course import course_button
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramNetworkError
from crud import test_crud
from handlers.subscribe import CHANNELS
from keyboards.subscribe import subscribe_kb, test_start_kb
from keyboards.video import video_kb
from handlers.discount_reminder import schedule_discount_reminders
from datetime import datetime

router = Router()

@router.callback_query(F.data == "real_start_test")
async def start_test(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    not_subscribed = []

    for channel in CHANNELS:
        try:
            chat_member = await bot.get_chat_member(channel, user_id)
            if chat_member.status in ["left", "kicked"]:
                not_subscribed.append(channel)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel}: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            not_subscribed.append(channel)

    if not_subscribed:
        try:
            await callback.message.answer(
                "–ö–µ–ª–µ—Å—ñ –∫–∞–Ω–∞–ª–¥–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã–ø –∞–ª üëá:\n" + "\n".join(not_subscribed),
                reply_markup=subscribe_kb()
            )
        except TelegramNetworkError as e:
            await callback.message.answer("‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä!")
        return

    user_id_str = str(user_id)
    student = await test_crud.get_student_by_telegram_id(user_id_str)
    if not student:
        try:
            await callback.message.answer("‚ùå –°–µ–Ω —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω—Å—ñ“£!")
        except TelegramNetworkError as e:
            await callback.message.answer("‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä")
        return

    tests = await test_crud.get_tests_by_direction(student.direction_id)
    if not tests or len(tests) < 10:
        try:
            await callback.message.answer("‚ùå –ë“±–ª –±–∞“ì—ã—Ç—Ç–∞ —Ç–µ—Å—Ç –∂–æ“õ –∏–ª–∏ —Ç–µ—Å—Ç—Ç–µ—Ä —Å–∞–Ω—ã –∂–µ—Ç–∫—ñ–ª—ñ–∫—Å—ñ–∑!")
        except TelegramNetworkError as e:
            await callback.message.answer("‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä")
        return

    await state.update_data(
        tests=[t.id for t in tests],
        current=0,
        correct=0
    )
    await send_question(callback.message, state, bot)

async def send_question(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    test_ids = data.get("tests", [])
    current = data.get("current", 0)

    if current >= len(test_ids):
        await finish_test(message, state, bot)
        return

    test = await test_crud.get_test_by_id(test_ids[current])
    if not test:
        await state.update_data(current=current + 1)
        await send_question(message, state, bot)
        return

    answers = await test_crud.get_answers_by_test(test.id)
    if len(answers) < 2:
        await state.update_data(current=current + 1)
        await send_question(message, state, bot)
        return

    options = [a.text for a in answers]
    correct_option_id = next((i for i, a in enumerate(answers) if a.is_correct), None)
    if correct_option_id is None:
        await state.update_data(current=current + 1)
        await send_question(message, state, bot)
        return

    try:
        await message.answer_poll(
            question=test.question,
            options=options,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=False,
            timeout=30
        )
    except TelegramNetworkError as e:
        await message.answer("‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä")
        await state.update_data(current=current + 1)
        await send_question(message, state, bot)

@router.poll_answer()
async def handle_poll_answer(poll: types.PollAnswer, state: FSMContext, bot: Bot):
    data = await state.get_data()
    current = data.get("current", 0)
    test_ids = data.get("tests", [])

    test = await test_crud.get_test_by_id(test_ids[current])
    answers = await test_crud.get_answers_by_test(test.id)

    correct_option_id = next((i for i, a in enumerate(answers) if a.is_correct), None)
    chosen = poll.option_ids[0] if poll.option_ids else None

    correct = data.get("correct", 0)
    if chosen == correct_option_id:
        correct += 1

    await state.update_data(
        current=current + 1,
        correct=correct
    )

    chat_id = poll.user.id
    try:
        await send_question(await bot.send_message(chat_id, "–ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ üëá"), state, bot)
    except TelegramNetworkError as e:
        await bot.send_message(chat_id, "‚ùå –•–∞–±–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞–π“õ–∞–ø –∫”©—Ä")

async def finish_test(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    correct = data.get("correct", 0)
    total = len(data.get("tests", []))

    if total != 10:
        try:
            await message.answer("‚ùå –¢–µ—Å—Ç—Ç–µ—Ä ”ô–ª—ñ –¥–∞–π—ã–Ω –µ–º–µ—Å, –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä! üòâ")
        except TelegramNetworkError as e:
            logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await state.clear()
        return

    if correct <= 3:
        rating_name = "A"
        rating_text = "–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç –¥–µ“£–≥–µ–π—ñ“£ –Ω–∞—à–∞—Ä, –∫–µ–º –¥–µ–≥–µ–Ω–¥–µ –±–∞–∑–∞–Ω—ã “Ø–π—Ä–µ–Ω—ñ–ø –∞–ª—à—ã üôà"
    elif 4 <= correct <= 6:
        rating_name = "B"
        rating_text = "–±–∞–∑–∞–Ω—ã –∂–∞“õ—Å—ã –±—ñ–ª–µ—Å—ñ“£, –±—ñ—Ä–∞“õ –±–∞–ª–ª—ã“£–¥—ã –∫”©–±–µ–π—Ç—É “Ø—à—ñ–Ω –º—ã–Ω–∞ –±–µ–π–Ω–µ–∂–∞–∑–±–∞–Ω—ã “õ–∞—Ä–∞–ø –∞–ª—à—ã üëåüèø"
    else:
        rating_name = "C"
        rating_text = "–ñ–∞—Ä–∞–π—Å—ã“£ –µ–Ω–¥—ñ –º–∞–∫—Å–∏–º—É–º –±–∞–ª–ª –∞–ª—É “Ø—à—ñ–Ω “õ–∏—ã–Ω –±”©–ª—ñ–º–¥–µ—Ä–¥—ñ “õ–∞—Ä–∞–ø —à—ã“ì—É –∫–µ—Ä–µ–∫, –º—ã–Ω–∞ –±–µ–π–Ω–µ–∂–∞–∑–±–∞–Ω—ã “õ–∞—Ä–∞–ø –∫”©—Ä—à—ñ ‚úåüèΩ"

    student = await test_crud.get_student_by_telegram_id(str(message.chat.id))
    if not student:
        try:
            await message.answer("‚ùå –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É, –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã")
        except TelegramNetworkError as e:
            logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await state.clear()
        return

    rating = await test_crud.get_rating(rating_name)
    if not rating:
        try:
            await message.answer(f"‚ùå –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É: –î–µ“£–≥–µ–π {rating_name} —Ç–∞–±—ã–ª–º–∞–¥—ã!")
        except TelegramNetworkError as e:
            logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        await state.clear()
        return

    try:
        await test_crud.save_student_result(student.id, rating.id)
    except Exception as e:
        await message.answer("‚ùå –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∞“õ–∞—É –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!")
        await state.clear()
        return

    video = await test_crud.get_video_by_rating_and_direction(rating.id, student.direction_id)
    video_message = (
        f"üé• –°–µ–Ω—ñ“£ –¥–µ“£–≥–µ–π—ñ“£–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Å—ã–Ω–∞“õ —Å–∞–±–∞“ì—ã ({rating_name}): {video.title}\n"
        f"–°—ñ–ª—Ç–µ–º–µ: {video.url}" if video else "‚ùå –°–µ–Ω—ñ“£ –¥–µ“£–≥–µ–π—ñ“£–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –±–µ–π–Ω–µ–∂–∞–∑–±–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã.\n"
        "–ë–∞—Å“õ–∞ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã –∫”©—Ä—É “Ø—à—ñ–Ω –∞–¥–º–∏–Ω–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å!"
    )
    reply_markup = video_kb(video.url) if video else test_start_kb()

    course_text = "üìö –†–µ–π—Ç–∏–Ω–≥—ñ“£–¥—ñ –∫”©—Ç–µ—Ä—É “Ø—à—ñ–Ω –∞—Ä–Ω–∞–π—ã –∫—É—Ä—Å –±–∞—Ä! 30 –º–∏–Ω—É—Ç —ñ—à—ñ–Ω–¥–µ –∂–∞–∑—ã–ª—ã“£—ã–∑, –∂–µ“£—ñ–ª–¥—ñ–∫–ø–µ–Ω!"
    try:
        await message.answer(
            f"‚úÖ –¢–µ—Å—Ç –∞—è“õ—Ç–∞–ª–¥—ã! –°–µ–Ω {correct}/{total} –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–¥—ñ“£ üéâ\n"
            f"–°–µ–Ω—ñ“£ –¥–µ“£–≥–µ–π—ñ“£: {rating_name} - {rating_text}\n"
            f"{video_message}",
            reply_markup=reply_markup
        )
        await message.answer(course_text)
    except TelegramNetworkError as e:
        await message.answer(
            "‚ùå –ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –Ω”ô—Ç–∏–∂–µ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. ”ò—Ä–µ–∫–µ—Ç—Ç—ñ –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞",
            reply_markup=test_start_kb()
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –Ω”ô—Ç–∏–∂–µ –∂—ñ–±–µ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. ”ò—Ä–µ–∫–µ—Ç—Ç—ñ –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞",
            reply_markup=test_start_kb()
        )

    try:
        await message.answer("", reply_markup=course_button)
    except TelegramNetworkError as e:
        logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–∞: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –∫—É—Ä—Å–∞: {e} –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    await schedule_discount_reminders(bot, message.chat.id)
    await state.clear()